package ru.arapov.firstnormaltelegrambot;

import com.vdurmont.emoji.EmojiParser;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.invoices.SendInvoice;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.payments.LabeledPrice;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.arapov.firstnormaltelegrambot.factories.KeyboardFactory;
import ru.arapov.firstnormaltelegrambot.models.CartItem;
import ru.arapov.firstnormaltelegrambot.models.Category;
import ru.arapov.firstnormaltelegrambot.models.Item;
import ru.arapov.firstnormaltelegrambot.repositories.CategoryRepository;
import ru.arapov.firstnormaltelegrambot.repositories.ItemRepository;
import ru.arapov.firstnormaltelegrambot.services.CartService;
import ru.arapov.firstnormaltelegrambot.services.RegistryService;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static ru.arapov.firstnormaltelegrambot.factories.KeyboardFactory.getMainMenuKeyboard;

@Slf4j
@Service
public class TelegramBot extends TelegramLongPollingBot {

    private final String botName;

    @Autowired
    private KeyboardFactory keyboardFactory;

    @Autowired
    private RegistryService registryService;

    @Autowired
    private ItemRepository itemRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private CartService cartService;

    public TelegramBot(
            @Value("${bot.token}") String botToken,
            @Value("${bot.name}") String botName) {
        super(botToken);
        this.botName = botName;
    }

    @Override
    public String getBotUsername() {
        return botName;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getFrom().getId();

            switch (messageText) {

                case "/start":
                    registryService.registerUser(update.getMessage());
                    startCommandReceived(chatId, update.getMessage().getFrom().getFirstName());
                    break;

                case "/data":
                    prepareAndSendMessage(chatId, registryService.getUserRepository(chatId));
                    break;

                case "/help":
                    handleHelpCommand(chatId);
                    break;

                default:
                    prepareAndSendMessage(chatId, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç!\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ /help");
                    break;
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long messageId = update.getCallbackQuery().getMessage().getMessageId();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            Long userId = update.getCallbackQuery().getFrom().getId();

            switch (callbackData) {

                case "items_list":
                    String messageText = """
                            üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*
                                    
                            –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:
                            ‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
                            ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
                            """;
                    executeEditMessageText(messageText, chatId, messageId, keyboardFactory.createItemsKeyboard());
                    break;
                case "cart_view":
                    showCart(userId, chatId, (int) messageId);
                    break;

                // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
                case "cart_clear":
                    cartService.clearCart(userId);
                    executeEditMessageText("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üßπ", chatId, messageId, getMainMenuKeyboard());
                    break;

                // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                case "cart_order":
                    handleOrder(userId, chatId, (int) messageId);
                    break;

                // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                case "main_menu":
                    executeEditMessageText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", chatId, messageId, getMainMenuKeyboard());
                    break;
                case "categories_list":
                    executeEditMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:", chatId, messageId, keyboardFactory.createCategoryKeyboard());
                    break;
                case "category_all":
                    executeEditMessageText("–í—Å–µ —Ç–æ–≤–∞—Ä—ã:", chatId, messageId,
                            keyboardFactory.createItemsByCategoriesKeyboard(-1L));
                    break;
                case "process_payment":
                    handleProcessPayment(userId, chatId);
                    break;

                case "cancel_payment":
                    executeEditMessageText("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", chatId, messageId, getMainMenuKeyboard());
                    break;
                default:
                    if (callbackData.startsWith("item_detail_")) {
                        Long itemId = Long.parseLong(callbackData.split("_")[2]);
                        Item item = itemRepository.findById(itemId).orElseThrow();
                        Long categoryId = item.getCategory().getId();
                        String itemText = "–¢–æ–≤–∞—Ä: " + item.getName() + "\n–¶–µ–Ω–∞: " + item.getPrice() + "‚ÇΩ";

                        executeEditMessageText(itemText, chatId, messageId, keyboardFactory.createItemDetailKeyboard(itemId, categoryId));
                    } else if (callbackData.startsWith("back_to_category_")) {
                        Long categoryId = Long.parseLong(callbackData.split("_")[3]);
                        Category category = categoryRepository.findById(categoryId).orElseThrow();

                        executeEditMessageText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: " + category.getName(),
                                chatId, messageId, keyboardFactory.createItemsByCategoriesKeyboard((categoryId)));
                    } else if (callbackData.startsWith("cart_add_")) {
                        Long itemId = Long.parseLong(callbackData.split("_")[2]);
                        cartService.addItem(userId, itemId, 1);
                        prepareAndSendMessage(chatId, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
                    } else if (callbackData.startsWith("cart_remove_")) {
                        Long itemId = Long.parseLong(callbackData.split("_")[2]);
                        boolean removed = cartService.removeItemFromCart(userId, itemId);

                        if (removed) {
                            showCart(userId, chatId, (int) messageId);
                        } else {
                            prepareAndSendMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ");
                        }
                    } else if (callbackData.startsWith("category_")) {
                        Long categoryId = Long.parseLong(callbackData.split("_")[1]);
                        Category category = categoryRepository.findById(categoryId).orElseThrow();
                        executeEditMessageText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:" + category.getName(), chatId, messageId, keyboardFactory.createItemsByCategoriesKeyboard(categoryId));
                    }
                    break;
            }
        }
    }

    private void startCommandReceived(long chatId, String name) {
        String answer = EmojiParser.parseToUnicode("–ü—Ä–∏–≤–µ—Ç, " + name + "!" + "\uD83D\uDC4B" + "\n" + "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã\uD83D\uDC49 /help");

        sendMessage(chatId, answer);
    }

    // –º–µ—Ç–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    private void sendMessage(long chatId, String text) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .build();

        message.setReplyMarkup(getMainMenuKeyboard());
        executeMessage(message);
    }

    // –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫, –ø—É—Ç–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ò–Ω–∞—á–µ –±—É–¥–µ—Ç text = null, —á—Ç–æ —Ö—É–µ–≤–µ–Ω—å–∫–æ
    private void executeEditMessageText(String text, long chatId, long messageId, InlineKeyboardMarkup keyboard) {
        EditMessageText message = new EditMessageText();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setMessageId((int) messageId);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    // –º–µ—Ç–æ–¥ execute —Å—Ä–∞–∑—É –æ–±–µ—Ä–Ω—É—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error occurred", e.getMessage());
        }
    }

    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    private void prepareAndSendMessage(long chatId, String textToSend) {
        SendMessage message = SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text(textToSend)
                .build();
        executeMessage(message);
    }

    //TODO –ü–û–ö–ê –≠–¢–û –ó–î–ï–°–¨, –ù–û –ù–ê–î–û –í–´–ù–ï–°–¢–ò –í –û–¢–î–ï–õ–¨–ù–´–ô –°–ï–†–í–ò–°!!!

    private void showCart(Long userId, Long chatId, Integer messageId) {
        int itemsCount = cartService.getItemsCount(userId);
        BigDecimal total = cartService.calculateTotal(userId);

        if (itemsCount > 0) {
            String cartText = "üõí *–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞*\n\n" +
                    "–¢–æ–≤–∞—Ä–æ–≤: " + itemsCount + "\n" +
                    "–û–±—â–∞—è —Å—É–º–º–∞: " + total + "‚ÇΩ";
            executeEditMessageText(cartText, chatId, messageId, keyboardFactory.createCartKeyboard(userId));
        } else {
            executeEditMessageText("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ü´ô", chatId, messageId, getMainMenuKeyboard());
        }
    }

    private void handleOrder(Long userId, Long chatId, Integer messageId) {
        int itemsCount = cartService.getItemsCount(userId);

        if (itemsCount > 0) {
            BigDecimal total = cartService.calculateTotal(userId);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            InlineKeyboardButton payButton = new InlineKeyboardButton();
            payButton.setText("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å " + total + "‚ÇΩ");
            payButton.setCallbackData("process_payment"); // ‚Üê –í–æ—Ç —ç—Ç–æ—Ç callback!

            InlineKeyboardButton cancelButton = new InlineKeyboardButton();
            cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
            cancelButton.setCallbackData("cancel_payment"); // ‚Üê –ò —ç—Ç–æ—Ç!

            rows.add(List.of(payButton));
            rows.add(List.of(cancelButton));

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            keyboard.setKeyboard(rows);

            executeEditMessageText(
                    "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: " + total + "‚ÇΩ",
                    chatId,
                    messageId,
                    keyboard
            );

        } else {
            prepareAndSendMessage(chatId, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
        }
    }


    private void handleProcessPayment(Long userId, Long chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            BigDecimal total = cartService.calculateTotal(userId);

            // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
            SendInvoice invoice = createInvoiceFromCart(chatId, userId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
            execute(invoice);

        } catch (Exception e) {
            log.error(e.getMessage());
            prepareAndSendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –æ–ø–ª–∞—Ç—ã");
        }
    }

    private SendInvoice createInvoiceFromCart(Long chatId, Long userId) {
        List<CartItem> cartItems = cartService.getCartItems(userId);

        List<LabeledPrice> prices = cartItems.stream()
                .map(cartItem -> new LabeledPrice(
                        cartItem.getItem().getName() + " x" + cartItem.getQuantity(), // ‚Üê quantity –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                        cartItem.getPrice().multiply(BigDecimal.valueOf(cartItem.getQuantity())) // ‚Üê —É–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ quantity!
                                .multiply(BigDecimal.valueOf(100)).intValue() // ‚Üê –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–ø–µ–π–∫–∏
                ))
                .collect(Collectors.toList());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        System.out.println("üü¢ Cart items: " + cartItems.size());
        for (CartItem item : cartItems) {
            System.out.println("üü¢ " + item.getItem().getName() + " x" + item.getQuantity() +
                    " = " + item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity())) + "‚ÇΩ");
        }

        SendInvoice invoice = new SendInvoice();
        invoice.setChatId(String.valueOf(chatId));
        invoice.setTitle("üí≥ –û–ø–ª–∞—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã");
        invoice.setDescription("–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã");
        invoice.setPayload("cart_" + System.currentTimeMillis() + "_" + userId);
        invoice.setProviderToken("1744374395:TEST:f69ed41d386338b7d598");
        invoice.setCurrency("RUB");
        invoice.setPrices(prices);

        invoice.setNeedPhoneNumber(false);
        invoice.setNeedEmail(false);
        invoice.setNeedShippingAddress(false);
        invoice.setIsFlexible(false);

        return invoice;
    }

    private void handleHelpCommand(Long chatId) {
        String helpText = """
                üöó *CarStudio16 - –ê–≤—Ç–æ–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã*
                        
                *‚ö°Ô∏è –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*
                1. –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
                2. –î–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                3. –û–ø–ª–∞—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–µ—Ä–µ–∑ Telegram
                        
                *üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ - 2-5 –¥–Ω–µ–π*
                *‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã*
                        
                *üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
                –ü–∏—à–∏ –Ω–∞–º: @carStudioSupport
                        
                –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start
                """;

        try {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text(helpText)
                    .parseMode("Markdown")
                    .build());
        } catch (TelegramApiException e) {
            log.error("help command error", e.getMessage());
        }
    }
}
